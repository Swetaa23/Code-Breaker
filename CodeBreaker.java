/*
 * Swetaa Suresh
 * November 18, 2019
 * Code Breaker
 */
package Exercises;
import java.util.Scanner;
import java.util.Random;
public class CodeBreaker {
	static Scanner console = new Scanner(System.in);

	public static void main(String[] args) {
		final String COLOURS = "YGBOP";
		final int LENGTH = 4;
		final int TRIES = 10; 
		createCode(COLOURS,LENGTH);
		
		System.out.println("Please enter your guess of length " + LENGTH +  " using the letters " + COLOURS + ":");
		char[][] guess = new char[TRIES][LENGTH];
		String guess1 = console.nextLine();
		
		if (guess1.length() == LENGTH && vaild(guess, COLOURS, LENGTH) ==true) {
			for (int i = 0; i < guess1.length(); i ++) {
				guess[0][i] = guess1.charAt(i);
			}
		} else {
			System.out.println("Please enter your guess again of length " + LENGTH +  " using the letters " + COLOURS + ":");
		}
		vaild(guess, COLOURS, LENGTH);
	 
	}
	/**
	 * Returns a string array containing randomly generated single character from 
	 * colours with a size of length.
	 * 
	 * @param colours contains the characters that will be used in the returned array
	 * @param length determines the size of the returned array
	 * @returns		 a character array of size, length,of randomly chosen characters from colours
	 */
	public static char[] createCode(String colours, int length) {
		Random randomNumber = new Random(); // random number generator
		char colourCode[] = new char[length]; // character array of colour code
		for (int i = 0; i < length; i ++) { // loop that inputs values in colour code
			int randomInt = randomNumber.nextInt(colours.length()); // random number inbetween the length of colours
			colourCode[i] = colours.charAt(randomInt); // inputs a random value at the given index
		}
		for (int i = 0; i < colourCode.length; i++) {
			System.out.print(colourCode[i]);
		}
		System.out.println();
		return colourCode;
	}
	/**
	 * Returns a boolean true if the every value in the array is in the string and 
	 * if the size of the array is equal to the length.
	 * 
	 * @param array of single characters
	 * @param colours contains the characters that must be in the string array
	 * @param length that array should be
	 * @return		true if all conditions are passed
	 */
	public static boolean vaild(char[][] guess, String colours, int length) {
		boolean valid = false; // sets the value as false
		int correctValues = 0; // sets the number of correct values as 0
		for (int i = 0; i < length; i ++) { // goes through the guess characters
			for (int j = 0; j < colours.length(); j ++) { // goes through the colours array
				if (guess[0][i] == colours.charAt(j)) { // checks if the values in the guess are in the colours array
					correctValues += 1; // ass 1 to correct value if it is in the colours array
				}
			}
		}
		if (correctValues == length) { // if the number of correct values is equal to the length, then valid becomes true
			valid = true;
		}
		System.out.println(valid);
		return valid;
	}
	/**
	 * Returns a new array of 'b', if the guess values are in the same positions
	 * as the computer generated array.
	 * 
	 * @param array of single characters from the user
	 * @param array of single characters randomly generated by the computer
	 * @return		array of 'b' based on number of correct positions
	 */
	public static char[] findFullyCorrect(String[] guess, String[] colourCode) {
		char correctPositions[] = new char[colourCode.length];
		int numCorrectPositions = 0;
		for (int i = 0; i < colourCode.length; i ++) {
			if (guess[i] == colourCode[i]) {
				numCorrectPositions += 1;
			}
		}
		if (numCorrectPositions == colourCode.length) {
			
		}
		return correctPositions;
	}
	/**
	 * Returns a new array that removes all of the correct values.
	 * 
	 * @param array of single characters containing user input
	 * @param array of single characters containing randomly generated values
	 * @return		array of values that are not in the correct positions or are not in the computer generated array
	 */
	public static String[] removeFullyCorrect(String[] guess, String[] code) {
		return code;
	}
}
